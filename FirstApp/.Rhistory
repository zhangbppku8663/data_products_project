rf_model$importance
length((rf_model$importance))
dim(complete_test)
dim(test)
count2 <- sapply(test, fun)
complete_test <- test[,count2<1]
dim(complete_test)
complete2 <- complete[names(complete_test)]
class(names(complete_test))
names(complete_test)[1]
for (name in names(complete_test)) {i=0if (name)}
'a'
'a' in c('a','b')
for (name in names(complete_test)) {i=0; if (! name %in% names(complete)){i = i+1}}
i
complete_test$problem_id
c('a','b')
remove(c,1)
idx <- which(names(complete_test) %in% names(complete))
factors <- names(complete_test)[idx]
complete2 <- complete[factors]
View(complete2)
rf_model2 <- randomForest(factor(classe) ~ .-X, data=complete2)
factors <- c(names(complete_test)[idx], 'X')
factors <- c(names(complete_test)[idx], 'classe')
complete2 <- complete[factors]
rf_model2 <- randomForest(factor(classe) ~ .-X, data=complete2)
pred2 <- predict(rf_model2, complete2$classe)
pred2 <- predict(rf_model2, complete2[,-1])
pred2 <- predict(rf_model2, complete2)
confusionMatrix(pred2, complete$classe)
p_test <- predict(rf_model2, complete_test)
str(complete_test)
str(complete)
str(complete_tets)
str(complete_test)
str(complete2)
?grep
grep("[arm|dumbbell|forearm|belt", names(complete))
grep("[arm|dumbbell|forearm|belt]", names(complete))
grep("arm|dumbbell|forearm|belt", names(complete))
meters_train <- complete[grep("arm|dumbbell|forearm|belt", names(complete))]
View(meters_train)
acc_train <- complete[c(names(complete)[acc_ind], 'classe')]
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete))
acc_train <- complete[c(names(complete)[acc_ind], 'classe')]
rf_model <- randomForest(factor(classe)~ .- X, data=acc_train)
pred <- predict(rf_model, acc_train)
rf_model <- randomForest(factor(classe)~ ., data=acc_train)
pred <- predict(rf_model, acc_train)
confusionMatrix(pred, acc_train$classe)
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete_test))
acc_test <- complete_test[c(names(complete_test)[acc_ind], 'classe')]
acc_test <- complete_test[names(complete_test)[acc_ind]]
predict(rf_model, newdata = acc_test)
test <- read.table("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", sep = ',', header = TRUE)
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete_test))
View(test)
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete))
acc_ind2 <- grep("arm|dumbbell|forearm|belt", names(complete_test))
acc_ind
acc_ind2
View(acc_train)
View(acc_test)
names(acc_train)
names(acc_test)
acc_train[grep("kurtosis", names(acc_train))]
names(acc_train)[grep("kurtosis", names(acc_train))]
names(acc_train)[grep("kurtosis|curtosis|amplitude", names(acc_train))]
names(acc_train)[grep("kurtosis|skewness|amplitude", names(acc_train))]
acc_ind <- grep("arm|dumbbell|forearm|belt|^kurtosis|^skewness|^amplitude", names(complete))
acc_train <- complete[c(names(complete)[acc_ind], 'classe')]
names(acc_train)
names(acc_test)
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete))
acc_train <- complete[names(complete)[acc_ind]]
acc_ind2 <- grep("kurtosis|skewness|amplitude", names(acc_train))
acc_train <- acc_train[c(names(acc_train)[!acc_ind2],'classe')]
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete))
acc_train <- complete[names(complete)[acc_ind]]
acc_ind2 <- grep("kurtosis|skewness|amplitude", names(acc_train))
acc_train <- acc_train[c(names(acc_train)[~acc_ind2],'classe')]
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete))
acc_train <- complete[names(complete)[acc_ind]]
acc_ind2 <- grep("kurtosis|skewness|amplitude", names(acc_train))
acc_train <- acc_train[c(names(acc_train)[!acc_ind2],'classe')]
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete))
acc_train <- complete[names(complete)[acc_ind]]
acc_ind2 <- grep("^kurtosis|^skewness|^amplitude", names(acc_train))
acc_train <- acc_train[c(names(acc_train)[acc_ind2],'classe')]
acc_ind2 <- grep("kurtosis|skewness|amplitude", names(acc_train))
acc_ind2 <- grep([^"kurtosis""skewness""amplitude"], names(acc_train))
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete),value = T)
acc_train <- complete[c(acc_ind, 'classe')]
acc_ind2 <- grep("kurtosis|skewness|amplitude", names(acc_train), value = T)
acc_train <- acc_train[-acc_ind2]
acc_train <- acc_train[,!acc_ind2]
acc_train <- sybset(acc_train, -acc_ind2)
acc_train <- subset(acc_train, -acc_ind2)
acc_ind2
class(acc_ind2)
class(c(acc_ind2))
temp <- subset(acc_train, acc_ind2)
temp <- subset(acc_train,select =  acc_ind2)
temp <- subset(acc_train,select =  -acc_ind2)
acc_train <- acc_train[, !names(acc_train) %in% acc_ind2]
rf_model <- randomForest(factor(classe)~ .- X, data=acc_train)
pred <- predict(rf_model, acc_train)
rf_model <- randomForest(factor(classe)~ ., data=acc_train)
pred <- predict(rf_model, acc_train)
confusionMatrix(pred,acc_train$classe)
pred2<- predict(rf_model, acc_test)
pred2
library(data.table)
library(caret)
library(randomForest)
training <- read.table("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", sep = ',', header=T)
# we do not need columns with many missing data
fun <- function(x){sum(is.na(x))}
count <- sapply(training, fun)
complete <- training[, count<1]
# get accelarator related columns and use them plut 'classe' to get the train dataset
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete),value = T)
acc_train <- complete[c(acc_ind, 'classe')]
acc_ind2 <- grep("kurtosis|skewness|amplitude", names(acc_train), value = T)
acc_train <- acc_train[, !names(acc_train) %in% acc_ind2]
View(acc_train)
# we do not need columns with many missing data
fun <- function(x){sum(is.na(x))}
count <- sapply(training, fun)
complete <- training[, count<1]
# for randomforest model, do not include columns with more than 32 levels
level_num <- sapply(complete, nlevels)
complete <- complete[, level_num<=32]
dim(complete)
# get accelarator related columns and use them plut 'classe' to get the train dataset
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete),value = T)
acc_train <- complete[c(acc_ind, 'classe')]
acc_ind2 <- grep("kurtosis|skewness|amplitude", names(acc_train), value = T)
acc_train <- acc_train[, !names(acc_train) %in% acc_ind2]
# for randomforest model, do not include columns with more than 32 levels
level_num <- sapply(complete, nlevels)
complete <- complete[, level_num<=32]
dim(complete)
# we do not need columns with many missing data
fun <- function(x){sum(is.na(x))}
count <- sapply(training, fun)
complete <- training[, count<1]
## for randomforest model, do not include columns with more than 32 levels
#level_num <- sapply(complete, nlevels)
#complete <- complete[, level_num<=32]
#dim(complete)
# get accelarator related columns and use them plut 'classe' to get the train dataset
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete),value = T)
acc_train <- complete[c(acc_ind, 'classe')]
acc_ind2 <- grep("kurtosis|skewness|amplitude", names(acc_train), value = T)
acc_train <- acc_train[, !names(acc_train) %in% acc_ind2]
View(acc_train)
# we do not need columns with many missing data
fun <- function(x){sum(is.na(x))}
count <- sapply(training, fun)
complete <- training[, count<1]
## for randomforest model, do not include columns with more than 32 levels
#level_num <- sapply(complete, nlevels)
#complete <- complete[, level_num<=32]
#dim(complete)
# get accelarator related columns and use them plut 'classe' to get the train dataset
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete),value = T)
acc_train <- complete[c(acc_ind, 'classe')]
acc_ind2 <- grep("kurtosis|skewness|amplitude", names(acc_train), value = T)
acc_train <- acc_train[, !names(acc_train) %in% acc_ind2]
View(acc_train)
acc_train['max_yaw_belt']
View(acc_train)
sum(is.na(acc_train['max_yaw_belt']))
?is.na
temp <- c(1,2,3,4,NA,2,3)
is.na(temp)
sum(is.na(temp))
sum(is.na(acc_train$max_yaw_belt))
sum(is.na(acc_train$min_yaw_belt))
sum(is.nan(acc_train$min_yaw_belt))
sum(is.nan(acc_train$min_yaw_belt))
colSums(is.na(acc_train$max_yaw_belt))
colSums(is.na(acc_train))
colSums(is.na(training$max_yaw_belt))
sum(is.na(training$max_yaw_belt))
training$max_yaw_belt[1]
training$max_yaw_belt[[1]
]
str(acc_train)
# we do not need columns with many missing data
fun <- function(x){sum(is.na(x))}
count <- sapply(training, fun)
complete <- training[, count<1]
## for randomforest model, do not include columns with more than 32 levels
#level_num <- sapply(complete, nlevels)
#complete <- complete[, level_num<=32]
#dim(complete)
# get accelarator related columns and use them plut 'classe' to get the train dataset
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete),value = T)
acc_train <- complete[c(acc_ind, 'classe')]
acc_ind2 <- grep("kurtosis|skewness|amplitude|max|min", names(acc_train), value = T)
acc_train <- acc_train[, !names(acc_train) %in% acc_ind2]
result <- rfcv(acc_train[,-"classe"],acc_train$classe, cv.fold = 5)
result <- rfcv(acc_train[,-c("classe")],acc_train$classe, cv.fold = 5)
result <- rfcv(acc_train[,-length(acc_train)],acc_train$classe, cv.fold = 5)
result <- rfcv(acc_train[,-length(acc_train)],acc_train$classe, cv.fold = 5)
library(caret)controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
modelRf
library(caret);controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
modelRf
modelRf <- train(classe ~ ., data=acc_train, method="rf", trControl=controlRf, ntree=250)
modelRf
smp_size <- floor(0.75 * nrow(acc_train))
set.seed(123)
train_ind <- sample(seq_len(nrow(acc_train)), size = smp_size)
training <- acc_train[train_ind, ]
validation <- acc_train[-train_ind, ]
rf_model <- randomForest(factor(classe)~ ., data=training)
pred <- predict(rf_model, validation)
confusionMatrix(pred, validation$classe)
corrPlot <- cor(training[, -length(names(training))])
corrplot(corrPlot, method="color")
corrgram(training[, -length(names(training))])
?Correlograms
??Correlograms
library(spatial)
corrgram(training[, -length(names(training))])
?Correlograms
cor(training, use=all.obs, method = "pearson")
cor(training, method = "pearson")
str(training)
cor(training[,-length(training)], method = "pearson")
library(data.table)
library(caret)
library(randomForest)
library(dplyr)
training <- read.table("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", sep = ',', header=T)
traiing <- tbl_df(training)
training <- tbl_df(training)
fun <- function(x){sum(is.na(x))}
count <- sapply(training, fun)
complete <- training[, count<1]
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete),value = T)
acc_train <- select(complete, acc_ind)
acc_train <- select(acc_train, -acc_ind2)
acc_train <- select(complete, acc_ind, classe)
acc_train <- select(acc_train, !one_of(acc_ind2))
acc_train <- select(acc_train, -one_of(acc_ind2))
library(data.table)
library(caret)
library(randomForest)
library(dplyr)
training <- read.table("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", sep = ',', header=T)
training <- tbl_df(training)
test <- read.table("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", sep = ',', header = TRUE)
test <- tbl_df(test)
count2 <- sapply(test, fun)
complete_test <- test[,count2<1]
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete_test), value=T)
acc_test <- select(complete_test, acc_ind)
# notice there is a "problem_id" column in the test data
View(acc_test)
library(corrgram)
install.packages("corrgram")
library(corrgram)
corrgram(training)
??corrgram
corrgram(cor(training[,-length(training)], method = "pearson"))
library(corrgram)
install.packages("mclust")
library(corrgram)
corrgram(training)
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=training, method="rf", trControl=controlRf, ntree=100)
modelRf
library(caret)
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=training, method="rf", trControl=controlRf, ntree=100)
modelRf
library(data.table)
library(caret)
library(randomForest)
library(dplyr)
training <- read.table("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", sep = ',', header=T)
training <- tbl_df(training)
# we do not need columns with many missing data
fun <- function(x){sum(is.na(x))}
count <- sapply(training, fun)
complete <- training[, count<1]
# get accelarator related columns and use them plut 'classe' to get the train dataset
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete),value = T)
acc_train <- select(complete, acc_ind, classe)
acc_ind2 <- grep("kurtosis|skewness|amplitude|max|min", names(acc_train), value = T)
acc_train <- select(acc_train, -one_of(acc_ind2))
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=training, method="rf", trControl=controlRf, ntree=100)
modelRf
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=acc_training, method="rf", trControl=controlRf, ntree=100)
modelRf
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=acc_train, method="rf", trControl=controlRf, ntree=100)
modelRf
library(data.table)
library(caret)
library(randomForest)
library(dplyr)
training <- read.table("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", sep = ',', header=T)
library(data.table)
library(caret)
library(randomForest)
library(dplyr)
training <- read.table("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", sep = ',', header=T)
training <- tbl_df(training)
# we do not need columns with many missing data
fun <- function(x){sum(is.na(x))}
count <- sapply(training, fun)
complete <- training[, count<1]
# get accelarator related columns and use them plut 'classe' to get the train dataset
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete),value = T)
acc_train <- select(complete, acc_ind, classe)
acc_ind2 <- grep("kurtosis|skewness|amplitude|max|min", names(acc_train), value = T)
acc_train <- select(acc_train, -one_of(acc_ind2))
install.packages(c("bindrcpp", "car", "curl", "dplyr", "glue", "Rcpp"))
install.packages(c("bindrcpp", "car", "curl", "dplyr", "glue", "Rcpp"))
install.packages(c("bindrcpp", "car", "curl", "dplyr", "glue", "Rcpp"))
install.packages(c("bindrcpp", "car", "curl", "dplyr", "glue", "Rcpp"))
install.packages(c("bindrcpp", "car", "curl", "dplyr", "glue", "Rcpp"))
install.packages(c("bindrcpp", "car", "curl", "dplyr", "glue", "Rcpp"))
install.packages(c("bindrcpp", "car", "curl", "dplyr", "glue", "Rcpp"))
rm(ls())
rm(list=ls(all=TRUE))
install.packages(c("bindrcpp", "car", "curl", "dplyr", "glue", "Rcpp"))
library(data.table)
library(caret)
library(randomForest)
library(dplyr)
training <- read.table("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", sep = ',', header=T)
training <- tbl_df(training)
# we do not need columns with many missing data
fun <- function(x){sum(is.na(x))}
count <- sapply(training, fun)
complete <- training[, count<1]
# get accelarator related columns and use them plut 'classe' to get the train dataset
acc_ind <- grep("arm|dumbbell|forearm|belt", names(complete),value = T)
acc_train <- select(complete, acc_ind, classe)
acc_ind2 <- grep("kurtosis|skewness|amplitude|max|min", names(acc_train), value = T)
acc_train <- select(acc_train, -one_of(acc_ind2))
cv_control <- trainControl(method='cv', 5)
rf_model <- train(classe ~ ., data=acc_train, method='rf',
troControl=cv_control, ntree=100)
cv_control <- trainControl(method='cv', 4)
rf_model <- train(classe ~ ., data=acc_train, method='rf',
troControl=cv_control, ntree=25)
rf_model
# in the comments, a training, validation split will be more efficient
#smp_size <- floor(0.75 * nrow(acc_train))
#set.seed(123)
#train_ind <- sample(seq_len(nrow(acc_train)), size = smp_size)
#training <- acc_train[train_ind, ]
#validation <- acc_train[-train_ind, ]
#rf_model <- randomForest(factor(classe)~ ., data=training)
#pred <- predict(rf_model, validation)
#confusionMatrix(pred, validation$classe)
summary(rf_model)
?rf.crossValidation
??rf.crossValidation
install.packages("rfUtilities")
library(rfUtilities)
rv.cv <- rf.crossValidation(rf_model, acc_train, p=0.1, n=5, seed=41, ntree=25)
rf.model <- randomForest(factor(classe ~ ., data=acc_train), ntree=100)
rf.model <- randomForest(factor(classe) ~ ., data=acc_train, ntree=100)
rv.cv <- rf.crossValidation(rf.model, acc_train, p=0.1, n=5, seed=41, ntree=100)
par(mfrow=c(1,2))
plot(rf.cv, type='cv', main='CV producers accuracy')
plot(rv.cv, type='cv', main='CV producers accuracy')
plot(rv.cv, type = "model", main = "Model producers accuracy")
plot(rv.cv, type="cv")
plot(rv.cv, type="cv")
print(rv.cv)
knitr::opts_chunk$set(fig.path = "figure")
# plot the error rates of the model
plot(rf.model, log = 'y')
# plot the feature importance
varImpPlot(rf.model)
knitr::opts_chunk$set(fig.path = "figure/")
# plot the error rates of the model
plot(rf.model, log = 'y')
# plot the feature importance
varImpPlot(rf.model)
knitr::opts_chunk$set(fig.path = "figures/", dev = 'png')
# plot the error rates of the model
plot(rf.model, log = 'y')
# plot the feature importance
varImpPlot(rf.model)
knitr::opts_chunk$set(fig.path = "figures/", dev = 'png')
# plot the error rates of the model
plot(rf.model, log = 'y')
legend("topright", legend=unique(acc_train$classe), col=unique(as.numeric(acc_train$classe)), pch=19)
# plot the feature importance
varImpPlot(rf.model)
knitr::opts_chunk$set(fig.path = "figures/", dev = 'png', fig.keep = 'high')
# plot the error rates of the model
plot(rf.model, log = 'y')
legend("topright", legend=unique(acc_train$classe), col=unique(as.numeric(acc_train$classe)), pch=19)
# plot the feature importance
varImpPlot(rf.model)
knitr::opts_chunk$set(fig.path = "figures/", include = TRUE)
# plot the error rates of the model
plot(rf.model, log = 'y')
legend("topright", legend=unique(acc_train$classe), col=unique(as.numeric(acc_train$classe)), pch=19)
# plot the feature importance
varImpPlot(rf.model)
# plot the error rates of the model
plot(rf.model, log = 'y')
legend("topright", legend=unique(acc_train$classe), col=unique(as.numeric(acc_train$classe)), pch=19)
# plot the feature importance
varImpPlot(rf.model)
# plot the error rates of the model
plot(rf.model, log = 'y')
legend("topright", legend=unique(acc_train$classe), col=unique(as.numeric(acc_train$classe)), pch=19)
# plot the feature importance
varImpPlot(rf.model)
install.packages("shiny")
library(shiny)
runApp('my_app')
runApp('01_hello')
runExample('01_hello')
install.packages("leaflet")
library("leaflet")
my_map <- leaflet() %>%
addTiles()
my_map = leaflet()
my_map = addTiles(my_map)
my_map
install.packages("plotly")
library(plotly)
plot_ly(data = mtcars, x = wt, y = mpg, mode = "markers")
mtcars
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers")
plot_ly(data=mtcars, x=wt, y=mpg, mode="markers")
plot_ly(data=mtcars, x=hp, y=mpg, mode="markers")
df = read.csv("C:/Users/zhang/Desktop/Coursera_R/hw1_data.csv")
head(df)
plot_ly(data=df, x =Ozone, y=wind, mode='markers')
plot_ly(x =df$Ozone, y=df$wind, mode='markers')
plot_ly(x =df$Ozone, y=df$wind, z = df$Solar.R, mode='markers')
plot_ly(x =df$Ozone, y=df$wind, z = df$Solar.R, mode='scatter3D')
plot_ly(x =df$Ozone, y=df$wind, z = df$Temp, mode='scatter3D')
plot_ly(x =df$Ozone, y=df$wind, z = df$Temp, mode='markers', type='scatter3D')
plot_ly(x =df$Ozone, y=df$wind, z = df$Temp, mode='markers', type='scatter3d')
size(df)
length(df)
df
df <- complete.cases(df)
df
df = read.csv("C:/Users/zhang/Desktop/Coursera_R/hw1_data.csv")
df <- df[complete.cases(df),]
df
plot_ly(x =df$Ozone, y=df$wind, z = df$Temp, mode='markers', type='scatter3d')
plot_ly(x =df$Ozone, y=df$wind, mode='markers', color=df$Wind)
type(df$x)
type(df)
class(df$x)
class(df)
df$x
clas(df$Ozone)
class(df$Ozone)
min(df$Ozone)
plot_ly(x =df$Ozone, y=df$wind, mode='markers', color=df$Wind)
plot_ly(x =df$Ozone, y=df$wind,z = df$Wind, mode='markers', color=df$Wind)
plot_ly(x =df$Wind, y=df$Ozone,z = df$Solar.R, mode='markers', color=df$Wind)
EuStockMarkets
stock <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
library(dplyr)
stock <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
library(tplyr)
install.packages("tplyr")
stock <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
?gather
library(tplyr)
install.packages("tidyr")
library(tidyr)
stock <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
library(dplyr)
stock <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
head(stock)
plot_ly(x=stock$time, y=stock$price, color=stock$index)
library(plotly)
plot_ly(x=stock$time, y=stock$price, color=stock$index)
runApp()
library(shiny)
runApp()
getwd()
setwd("C:/Users/zhang/Desktop/Coursera_R/DevelopingDataProducts/Project")
setwd("C:/Users/zhang/Desktop/Coursera_R/DevelopingDateProducts/Project/FirstApp")
runApp()
